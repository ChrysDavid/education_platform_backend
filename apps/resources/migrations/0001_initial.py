# Generated by Django 5.2 on 2025-04-21 12:29

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='titre')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='slug')),
                ('description', models.TextField(verbose_name='description')),
                ('resource_type', models.CharField(choices=[('document', 'Document'), ('image', 'Image'), ('video', 'Vidéo'), ('audio', 'Audio'), ('link', 'Lien externe'), ('exercise', 'Exercice'), ('lesson', 'Leçon'), ('quiz', 'Quiz'), ('other', 'Autre')], max_length=20, verbose_name='type de ressource')),
                ('access_level', models.CharField(choices=[('public', 'Public'), ('verified', 'Utilisateurs vérifiés'), ('students', 'Étudiants'), ('teachers', 'Enseignants'), ('advisors', 'Conseillers'), ('private', 'Privé (créateur uniquement)')], default='public', max_length=20, verbose_name="niveau d'accès")),
                ('file', models.FileField(blank=True, null=True, upload_to='resources/', verbose_name='fichier')),
                ('external_url', models.URLField(blank=True, null=True, verbose_name='URL externe')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='resource_thumbnails/', verbose_name='vignette')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='créée le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='mise à jour le')),
                ('tags', models.JSONField(blank=True, default=list, verbose_name='tags')),
                ('language', models.CharField(blank=True, max_length=10, verbose_name='langue')),
                ('duration', models.PositiveIntegerField(blank=True, null=True, verbose_name='durée (minutes)')),
                ('author_name', models.CharField(blank=True, max_length=255, verbose_name="nom de l'auteur")),
                ('source', models.CharField(blank=True, max_length=255, verbose_name='source')),
                ('license', models.CharField(blank=True, max_length=100, verbose_name='licence')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='nombre de vues')),
                ('download_count', models.PositiveIntegerField(default=0, verbose_name='nombre de téléchargements')),
                ('like_count', models.PositiveIntegerField(default=0, verbose_name="nombre de j'aime")),
                ('is_approved', models.BooleanField(default=False, verbose_name='approuvée')),
                ('is_featured', models.BooleanField(default=False, verbose_name='mise en avant')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to=settings.AUTH_USER_MODEL, verbose_name='créé par')),
            ],
            options={
                'verbose_name': 'ressource',
                'verbose_name_plural': 'ressources',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CollectionResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='ordre')),
                ('added_at', models.DateTimeField(auto_now_add=True, verbose_name='ajouté le')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resources.resource', verbose_name='ressource')),
            ],
            options={
                'verbose_name': 'ressource de collection',
                'verbose_name_plural': 'ressources de collection',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ResourceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='nom')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='slug')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('icon', models.CharField(blank=True, help_text="Nom de l'icône CSS", max_length=50, verbose_name='icône')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='ordre')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='créée le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='mise à jour le')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='resources.resourcecategory', verbose_name='catégorie parente')),
            ],
            options={
                'verbose_name': 'catégorie de ressource',
                'verbose_name_plural': 'catégories de ressource',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.AddField(
            model_name='resource',
            name='categories',
            field=models.ManyToManyField(related_name='resources', to='resources.resourcecategory', verbose_name='catégories'),
        ),
        migrations.CreateModel(
            name='ResourceCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='titre')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='slug')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='collection_covers/', verbose_name='image de couverture')),
                ('is_public', models.BooleanField(default=True, verbose_name='public')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='créée le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='mise à jour le')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_collections', to=settings.AUTH_USER_MODEL, verbose_name='créé par')),
                ('resources', models.ManyToManyField(related_name='collections', through='resources.CollectionResource', to='resources.resource', verbose_name='ressources')),
            ],
            options={
                'verbose_name': 'collection de ressources',
                'verbose_name_plural': 'collections de ressources',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='collectionresource',
            name='collection',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='resources.resourcecollection', verbose_name='collection'),
        ),
        migrations.CreateModel(
            name='ResourceComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='contenu')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='mis à jour le')),
                ('is_edited', models.BooleanField(default=False, verbose_name='édité')),
                ('is_public', models.BooleanField(default=True, verbose_name='public')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='resources.resourcecomment', verbose_name='commentaire parent')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='resources.resource', verbose_name='ressource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_comments', to=settings.AUTH_USER_MODEL, verbose_name='utilisateur')),
            ],
            options={
                'verbose_name': 'commentaire',
                'verbose_name_plural': 'commentaires',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ResourceLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='créé le')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='resources.resource', verbose_name='ressource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_likes', to=settings.AUTH_USER_MODEL, verbose_name='utilisateur')),
            ],
            options={
                'verbose_name': "j'aime",
                'verbose_name_plural': "j'aime",
            },
        ),
        migrations.CreateModel(
            name='ResourceReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], verbose_name='note')),
                ('comment', models.TextField(blank=True, verbose_name='commentaire')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='mis à jour le')),
                ('is_public', models.BooleanField(default=True, verbose_name='public')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='resources.resource', verbose_name='ressource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_reviews', to=settings.AUTH_USER_MODEL, verbose_name='utilisateur')),
            ],
            options={
                'verbose_name': 'évaluation de ressource',
                'verbose_name_plural': 'évaluations de ressource',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['resource_type'], name='resources_r_resourc_1a6f3f_idx'),
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['access_level'], name='resources_r_access__4d580d_idx'),
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['is_approved'], name='resources_r_is_appr_dda797_idx'),
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['is_featured'], name='resources_r_is_feat_66e011_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='collectionresource',
            unique_together={('collection', 'resource')},
        ),
        migrations.AlterUniqueTogether(
            name='resourcelike',
            unique_together={('resource', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='resourcereview',
            unique_together={('resource', 'user')},
        ),
    ]
