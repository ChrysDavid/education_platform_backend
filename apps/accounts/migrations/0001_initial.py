# Generated by Django 5.2 on 2025-04-28 22:09

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='adresse email')),
                ('first_name', models.CharField(max_length=150, verbose_name='prénom')),
                ('last_name', models.CharField(max_length=150, verbose_name='nom')),
                ('phone_number', models.CharField(blank=True, max_length=20, verbose_name='numéro de téléphone')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='date de naissance')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/', verbose_name='photo de profil')),
                ('address', models.CharField(blank=True, max_length=255, verbose_name='adresse')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='ville')),
                ('postal_code', models.CharField(blank=True, max_length=20, verbose_name='code postal')),
                ('country', models.CharField(blank=True, max_length=100, verbose_name='pays')),
                ('identity_document', models.FileField(blank=True, null=True, upload_to='identity_documents/', verbose_name="pièce d'identité")),
                ('data_processing_consent', models.BooleanField(default=False, verbose_name='consentement au traitement des données')),
                ('image_rights_consent', models.BooleanField(default=False, verbose_name="autorisation de droit à l'image")),
                ('communication_preferences', models.JSONField(blank=True, default=list, verbose_name='préférences de communication')),
                ('languages', models.JSONField(blank=True, default=dict, verbose_name='langues parlées et niveaux')),
                ('emergency_contact_name', models.CharField(blank=True, max_length=150, verbose_name="nom du contact d'urgence")),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=20, verbose_name="téléphone du contact d'urgence")),
                ('emergency_contact_relation', models.CharField(blank=True, max_length=50, verbose_name="relation avec le contact d'urgence")),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name="date d'inscription")),
                ('is_active', models.BooleanField(default=False, verbose_name='actif')),
                ('is_staff', models.BooleanField(default=False, verbose_name='personnel')),
                ('type', models.CharField(choices=[('student', 'Étudiant'), ('pupil', 'Élève'), ('teacher', 'Enseignant'), ('advisor', "Conseiller d'orientation"), ('administrator', 'Administrateur')], max_length=20, verbose_name="type d'utilisateur")),
                ('verification_status', models.CharField(choices=[('unverified', 'Non vérifié'), ('pending', 'En attente'), ('verified', 'Vérifié'), ('rejected', 'Rejeté')], default='unverified', max_length=20, verbose_name='statut de vérification')),
                ('verification_requested_date', models.DateTimeField(blank=True, null=True, verbose_name='date de demande de vérification')),
                ('verification_completed_date', models.DateTimeField(blank=True, null=True, verbose_name='date de vérification complétée')),
                ('verification_notes', models.TextField(blank=True, verbose_name='notes de vérification')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'utilisateur',
                'verbose_name_plural': 'utilisateurs',
                'ordering': ['-date_joined'],
            },
        ),
        migrations.CreateModel(
            name='Administrator',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='administrator_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('role', models.CharField(max_length=100, verbose_name='rôle')),
                ('department', models.CharField(blank=True, max_length=100, verbose_name='département')),
                ('administrative_level', models.CharField(blank=True, max_length=100, verbose_name='niveau administratif')),
                ('responsibilities', models.JSONField(blank=True, default=list, verbose_name='responsabilités principales')),
            ],
            options={
                'verbose_name': 'administrateur',
                'verbose_name_plural': 'administrateurs',
            },
        ),
        migrations.CreateModel(
            name='Advisor',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='advisor_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('organization', models.CharField(max_length=255, verbose_name='entreprise ou cabinet de rattachement')),
                ('specialization', models.CharField(max_length=255, verbose_name='spécialité du conseil')),
                ('years_of_experience', models.PositiveIntegerField(default=0, verbose_name="années d'expérience en conseil")),
                ('professional_license', models.CharField(blank=True, max_length=100, verbose_name='numéro de licence professionnelle')),
                ('certifications', models.JSONField(blank=True, default=list, verbose_name='certification(s) professionnelle(s)')),
                ('certification_documents', models.JSONField(blank=True, default=list, verbose_name='documents de certification')),
                ('geographical_areas', models.JSONField(blank=True, default=list, verbose_name="zones géographiques d'intervention")),
                ('rates', models.JSONField(blank=True, default=dict, verbose_name='tarifs pratiqués')),
                ('portfolio', models.FileField(blank=True, null=True, upload_to='advisor_portfolios/', verbose_name='portfolio/exemples de réalisations')),
                ('portfolio_link', models.URLField(blank=True, verbose_name='lien vers portfolio en ligne')),
                ('publications', models.JSONField(blank=True, default=list, verbose_name='publications/travaux de recherche')),
                ('availability', models.JSONField(blank=True, default=dict, verbose_name='disponibilités pour rendez-vous')),
            ],
            options={
                'verbose_name': 'conseiller',
                'verbose_name_plural': 'conseillers',
            },
        ),
        migrations.CreateModel(
            name='Pupil',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='pupil_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('school_name', models.CharField(blank=True, max_length=255, verbose_name="nom de l'établissement scolaire")),
                ('current_level', models.CharField(blank=True, max_length=100, verbose_name='niveau actuel')),
                ('specialization', models.CharField(blank=True, max_length=100, verbose_name='section ou spécialité')),
                ('legal_guardian_name', models.CharField(blank=True, max_length=150, verbose_name='nom du responsable légal')),
                ('legal_guardian_phone', models.CharField(blank=True, max_length=20, verbose_name='numéro de téléphone du parent ou tuteur')),
                ('second_guardian_name', models.CharField(blank=True, max_length=150, verbose_name='nom du second parent/responsable légal')),
                ('second_guardian_phone', models.CharField(blank=True, max_length=20, verbose_name='téléphone du second responsable légal')),
                ('cafeteria', models.BooleanField(default=False, verbose_name='inscription à la cantine')),
                ('dietary_restrictions', models.TextField(blank=True, verbose_name='régime alimentaire particulier')),
                ('school_transport', models.BooleanField(default=False, verbose_name='utilisation du transport scolaire')),
                ('transport_details', models.TextField(blank=True, verbose_name='détails sur le transport scolaire')),
                ('medical_information', models.TextField(blank=True, verbose_name='informations médicales importantes')),
                ('school_insurance', models.CharField(blank=True, max_length=255, verbose_name='assurance scolaire')),
                ('exit_permissions', models.JSONField(blank=True, default=list, verbose_name='autorisations de sortie')),
                ('siblings_at_school', models.TextField(blank=True, verbose_name="fratrie dans l'établissement")),
                ('desired_activities', models.JSONField(blank=True, default=list, verbose_name='activités périscolaires souhaitées')),
            ],
            options={
                'verbose_name': 'élève',
                'verbose_name_plural': 'élèves',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='student_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('school_id', models.PositiveIntegerField(blank=True, null=True, verbose_name="ID de l'école")),
                ('institution_name', models.CharField(blank=True, max_length=255, verbose_name='établissement fréquenté')),
                ('current_level', models.CharField(blank=True, max_length=100, verbose_name="niveau d'études actuel")),
                ('major', models.CharField(blank=True, max_length=100, verbose_name='spécialité / filière suivie')),
                ('academic_year', models.CharField(blank=True, max_length=9, verbose_name='année universitaire en cours')),
                ('student_id', models.CharField(blank=True, max_length=50, verbose_name='matricule étudiant')),
                ('scholarship', models.BooleanField(default=False, verbose_name="bénéficiaire d'une bourse")),
                ('scholarship_type', models.CharField(blank=True, max_length=100, verbose_name='type de bourse')),
                ('housing_needs', models.JSONField(blank=True, default=list, verbose_name='logement étudiant recherché')),
                ('internship_search', models.TextField(blank=True, verbose_name='stages/alternance recherchés')),
                ('computer_skills', models.JSONField(blank=True, default=list, verbose_name='compétences informatiques')),
                ('extracurricular_activities', models.TextField(blank=True, verbose_name='activités extra-universitaires')),
                ('interests', models.JSONField(blank=True, default=list, verbose_name="centres d'intérêt")),
                ('average_grade', models.FloatField(blank=True, null=True, verbose_name='moyenne générale')),
            ],
            options={
                'verbose_name': 'étudiant',
                'verbose_name_plural': 'étudiants',
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='teacher_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('school_id', models.PositiveIntegerField(blank=True, null=True, verbose_name="ID de l'école")),
                ('institution_name', models.CharField(blank=True, max_length=255, verbose_name='établissement où il enseigne')),
                ('subjects', models.JSONField(default=list, verbose_name='matières enseignées')),
                ('highest_degree', models.CharField(blank=True, max_length=255, verbose_name='diplôme le plus élevé obtenu')),
                ('degree_document', models.FileField(blank=True, null=True, upload_to='teacher_degrees/', verbose_name='document du diplôme')),
                ('years_of_experience', models.PositiveIntegerField(default=0, verbose_name="années d'expérience en enseignement")),
                ('teaching_type', models.JSONField(blank=True, default=list, verbose_name="type d'enseignement")),
                ('cv', models.FileField(blank=True, null=True, upload_to='teacher_cvs/', verbose_name='CV complet')),
                ('availability', models.JSONField(blank=True, default=dict, verbose_name='disponibilités horaires')),
                ('professional_references', models.TextField(blank=True, verbose_name='références professionnelles')),
                ('continuous_education', models.JSONField(blank=True, default=list, verbose_name='formations continues suivies')),
                ('qualifications', models.CharField(blank=True, max_length=255, verbose_name='qualifications')),
                ('professional_license', models.CharField(blank=True, max_length=100, verbose_name='numéro de licence professionnelle')),
                ('expertise_areas', models.JSONField(blank=True, default=list, verbose_name="domaines d'expertise")),
            ],
            options={
                'verbose_name': 'enseignant',
                'verbose_name_plural': 'enseignants',
            },
        ),
    ]
